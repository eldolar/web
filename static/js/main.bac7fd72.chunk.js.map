{"version":3,"sources":["styles/_variables.scss","styles/Bank.module.scss","styles/BankList.module.scss","styles/Navbar.module.scss","styles/Footer.module.scss","styles/App.scss","components/Bank.js","components/BankList.js","actions/banksActions.js","containers/BankListContainer.js","components/RefreshBanks.js","containers/RefreshContainer.js","components/ToggleTheme.js","components/Navbar.js","containers/NavbarContainer.js","components/Footer.js","components/About.js","App.js","serviceWorker.js","reducers/banks.js","sagas/index.js","lib/store.js","index.js"],"names":["module","exports","text","number","iconcolor","box","name","exchange","no_data","loadingBox","animate","bankList","navigation","footer","Bank","_ref","_ref$bank","bank","sell","buy","url","noData","isNaN","hasExchange","concat","styles","mainClasses","react_default","a","createElement","className","data-test","onClick","window","open","currencyFormat","price","Number","parseFloat","toLocaleString","currency","style","BankList","loading","banks","length","map","index","key","defaultProps","FETCH_BANKS","fetchBanksBegin","type","fetchBanksSuccess","data","updatedAt","createdAt","fetchBanksFailure","error","payload","fetchBanks","BankListContainer","this","props","_this$props","components_BankList","React","Component","connect","state","dispatch","RefreshBanks","refresh","react_router_dom","to","event","e","preventDefault","handleClick","dist_default","iconSet","color","base","size","icon","Refresh","ToggleTheme","_useState","useState","localStorage","getItem","_useState2","Object","slicedToArray","theme","setTheme","useEffect","setItem","document","documentElement","classList","add","setAttribute","setTimeout","remove","toggle","Navbar","RefreshContainer","components_ToggleTheme","Footer","href","About","role","aria-label","App","basename","NavbarContainer","react_router","exact","path","component","components_Footer","Boolean","location","hostname","match","initialState","watchFetchBanks","fetchBanksAsync","DOMAIN","regenerator_default","wrap","_context","prev","next","takeLatest","stop","_marked","_context2","put","call","fetch","then","res","json","sent","forEach","Date","toString","t0","_marked2","sagaMiddleware","createSagaMiddleware","store","createStore","arguments","undefined","action","objectSpread","applyMiddleware","run","rootElement","getElementById","ReactDOM","render","es","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bac7fd72.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"var(--text)\",\"number\":\"var(--number)\",\"iconcolor\":\"var(--icon)\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"var(--text)\",\"number\":\"var(--number)\",\"iconcolor\":\"var(--icon)\",\"box\":\"Bank_box__3yWWQ\",\"name\":\"Bank_name__2rdE2\",\"exchange\":\"Bank_exchange__3v0lt\",\"no_data\":\"Bank_no_data__3RCBF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"var(--text)\",\"number\":\"var(--number)\",\"iconcolor\":\"var(--icon)\",\"loadingBox\":\"BankList_loadingBox__34tYn\",\"animate\":\"BankList_animate__2D5V_\",\"bankList\":\"BankList_bankList__19ahC\",\"no_data\":\"BankList_no_data__Lb0Oc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"var(--text)\",\"number\":\"var(--number)\",\"iconcolor\":\"var(--icon)\",\"navigation\":\"Navbar_navigation__1GPFN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"var(--text)\",\"number\":\"var(--number)\",\"iconcolor\":\"var(--icon)\",\"footer\":\"Footer_footer__2SqrG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"var(--text)\",\"number\":\"var(--number)\",\"iconcolor\":\"var(--icon)\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../styles/Bank.module.scss';\n\nexport default function Bank({ bank: { name, sell, buy, url } }) {\n  const noData = hasExchange(sell, buy) ? '' : `${styles.no_data}`;\n  const mainClasses = `${styles.box} ${noData}`;\n\n  return (\n    <div className={mainClasses} data-test='bank-box'>\n      <h1 className={styles.name} onClick={ () => window.open(url, '_blank') }>\n        {name}\n      </h1>\n      <div className={styles.exchange}>\n        <p>\n          Venta\n          <span>{currencyFormat(sell)}</span>\n        </p>\n        <p>\n          Compra\n          <span>{currencyFormat(buy)}</span>\n        </p>\n\n      </div>\n    </div>\n  );\n}\n\nfunction hasExchange(sell, buy) {\n  const noExchnage = (sell === '0' || buy === '0') ||\n    (sell === '' || buy === '') || (isNaN(sell) || isNaN(buy));\n\n  if (noExchnage) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction currencyFormat(price) {\n  const parsePrice = Number.parseFloat(price);\n\n  return parsePrice.toLocaleString('es-AR', { currency: 'ARS', style: 'currency' });\n}\n\nBank.propTypes = {\n  bank: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    sell: PropTypes.string,\n    buy: PropTypes.string,\n    url: PropTypes.string,\n  })\n};\n","import React from 'react';\nimport Bank from './Bank';\nimport PropTypes from 'prop-types';\nimport styles from '../styles/BankList.module.scss';\n\nfunction BankList({ loading, banks }) {\n  if (loading) {\n    return(\n      <div className={styles.loadingBox}>\n        <h1>Cargando</h1>\n      </div>\n    );\n  }\n\n  if (banks.length === 0) {\n    return <h1 className={styles.no_data}>No hay información</h1>;\n  }\n\n  return (\n    <div className={styles.bankList}>\n      { banks.map( (bank, index) => <Bank key={index} bank={bank} />) }\n    </div>\n  );\n}\n\nexport default BankList;\n\nBankList.propTypes = {\n  loading: PropTypes.bool,\n  banks: PropTypes.arrayOf(Bank.propTypes.bank).isRequired\n};\n\nBankList.defaultProps = {\n  loading: false,\n  banks: []\n};\n","export const FETCH_BANKS_BEGIN   = 'FETCH_BANKS_BEGIN';\nexport const FETCH_BANKS_SUCCESS = 'FETCH_BANKS_SUCCESS';\nexport const FETCH_BANKS_FAILURE = 'FETCH_BANKS_FAILURE';\nexport const FETCH_BANKS = 'FETCH_BANKS';\n\nexport const fetchBanksBegin = () => ({\n  type: FETCH_BANKS_BEGIN\n});\n\nexport const fetchBanksSuccess = data => {\n  return {\n    type: FETCH_BANKS_SUCCESS,\n    banks: data.banks,\n    updatedAt: data.createdAt\n  };\n};\n\nexport const fetchBanksFailure = error => ({\n  type: FETCH_BANKS_FAILURE,\n  payload: { error }\n});\n\nexport const fetchBanks = () => ({\n  type: FETCH_BANKS\n});","import React from 'react';\nimport BankList from './../components/BankList';\nimport { connect } from 'react-redux';\nimport { fetchBanks } from './../actions/banksActions';\n\nclass BankListContainer extends React.Component {\n  componentDidMount() {\n    if (this.props.banks.length === 0)\n      this.props.fetchBanks();\n  }\n\n  render() {\n    const { loading, banks } = this.props;\n    return(\n      <BankList loading={loading} banks={banks}/>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchBanks: () => { dispatch( fetchBanks() ); },\n  };\n};\n\n// react-redux\nconst mapStateToProps = state => {\n  return {\n    loading: state.loading,\n    banks: state.banks\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(BankListContainer);\n","import React from 'react';\nimport iconSet from './../fonts/selection.json';\nimport IcomoonReact from 'icomoon-react';\nimport base from './../styles/_variables.scss';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nconst RefreshBanks = ({ refresh }) => (\n  <Link to=\"/\" onClick={ (event) => handleClick(event, refresh) }>\n    <IcomoonReact\n      iconSet={iconSet}\n      color={base.text}\n      size={16}\n      icon=\"loop2\" />\n  </Link>\n);\n\nfunction handleClick(e, refresh) {\n  e.preventDefault();\n  refresh();\n}\n\nRefreshBanks.propTypes = {\n  refresh: PropTypes.func\n};\n\nexport default RefreshBanks;\n","import { connect } from 'react-redux';\nimport Refresh from './../components/RefreshBanks';\nimport { fetchBanks } from './../actions/banksActions';\n\n// react-redux\nconst mapDispatchToProps = dispatch => {\n  return {\n    refresh: () => { dispatch( fetchBanks() ); },\n  };\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(Refresh);\n","import React, { useState, useEffect } from 'react';\nimport iconSet from './../fonts/selection.json';\nimport IcomoonReact from 'icomoon-react';\nimport base from './../styles/_variables.scss';\n\nconst ToggleTheme = () => {\n  // useState will call this function on the first rendering.\n  const initialTheme = () => window.localStorage.getItem('theme') || 'light';\n\n  const [theme, setTheme] = useState(initialTheme);\n\n  useEffect(\n    () => {\n      window.localStorage.setItem('theme', theme);\n      document.documentElement.classList.add('theme-transition');\n      document.documentElement.setAttribute('data-theme', theme);\n      window.setTimeout(() => {\n        document.documentElement.classList.remove('theme-transition');\n      }, 1000);\n    },\n    [theme],\n  );\n\n  const toggle = () => {\n    const mode = theme === 'light' ? 'dark' : 'light';\n    setTheme(mode);\n  };\n\n  const getIcon = () => (theme === 'light' ? 'face-sunglasses' : 'face-sunglasses1');\n\n  return(\n    <button className=\"mode\" onClick={toggle}>\n      <IcomoonReact\n        iconSet={iconSet}\n        size={18}\n        color={base.iconcolor}\n        onClick={toggle}\n        icon={getIcon()} />\n    </button>\n  );\n};\n\nexport default ToggleTheme;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport Refresh from '../containers/RefreshContainer';\nimport styles from '../styles/Navbar.module.scss';\n\nimport PropTypes from 'prop-types';\nimport ToggleTheme from './ToggleTheme';\n\nconst Navbar = ({ updatedAt }) => (\n  <nav className={styles.navigation}>\n    <p>\n      <span>Actualizado: </span>\n      { updatedAt }\n      <Refresh />\n      <ToggleTheme />\n    </p>\n    <ul>\n      <li>\n        <NavLink to=\"/\">Inicio</NavLink>\n      </li>\n      <li>\n        <NavLink to=\"/about\">Sobre</NavLink>\n      </li>\n    </ul>\n  </nav>\n);\n\nNavbar.propTypes = {\n  updatedAt: PropTypes.string\n};\n\nNavbar.defaultProps = {\n  updatedAt: ''\n};\n\nexport default Navbar;\n","import { connect } from 'react-redux';\nimport Navbar from './../components/Navbar';\n\n// react-redux\nconst mapStateToProps = state => {\n  return {\n    updatedAt: state.updatedAt\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n)(Navbar);\n","import React from 'react';\nimport styles from '../styles/Footer.module.scss';\nimport iconSet from './../fonts/selection.json';\nimport IcomoonReact from 'icomoon-react';\nimport base from './../styles/_variables.scss';\n\nconst Footer = () => (\n  <footer className={styles.footer}>\n    <ul>\n      <li>\n        <a href=\"https://github.com/eldolar/web\">\n          <IcomoonReact\n            iconSet={iconSet}\n            color={base.number}\n            size={25}\n            icon=\"github\" />\n        </a>\n      </li>\n      <li>\n        <a href=\"/\">\n          <IcomoonReact\n            iconSet={iconSet}\n            color={base.number}\n            size={25}\n            icon=\"android\" />\n        </a>\n      </li>\n      <li>\n        <a href=\"/\">\n          <IcomoonReact\n            iconSet={iconSet}\n            color={base.number}\n            size={25}\n            icon=\"appleinc\" />\n        </a>\n      </li>\n\n    </ul>\n  </footer>\n);\n\nexport default Footer;\n","import React from 'react';\n\nconst About = () => (\n  <div>\n    <h2>\n      ~\n      <span role=\"img\" aria-label=\"Man Technologist\">👨🏼‍💻️</span>\n      ~\n    </h2>\n\n  </div>\n);\n\nexport default About;\n","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nimport BankList from './containers/BankListContainer';\nimport Navbar from './containers/NavbarContainer';\nimport Footer from './components/Footer';\nimport About from './components/About';\n\nimport './styles/App.scss';\n\nfunction App() {\n  return (\n    <BrowserRouter basename=\"/web\">\n      <header>\n        <Navbar />\n      </header>\n\n      <section className=\"content\">\n        <Route exact path=\"/\" component={BankList} />\n        <Route path=\"/about\" component={About} />\n      </section>\n\n      <Footer />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  FETCH_BANKS_BEGIN,\n  FETCH_BANKS_SUCCESS,\n  FETCH_BANKS_FAILURE\n} from './../actions/banksActions';\n\nconst initialState = { banks: [], loading: false, updatedAt: ''};\n\nexport const reducer = (state = initialState, action) => {\n  switch(action.type) {\n    case FETCH_BANKS_BEGIN:\n      // Mark the state as \"loading\" so we can show a spinner or something\n      // Also, reset any errors. We're starting fresh.\n      return {\n        ...state,\n        loading: true,\n      };\n\n    case FETCH_BANKS_SUCCESS:\n      // All done: set loading \"false\".\n      // Also, replace the items with the ones from the server\n      return {\n        ...state,\n        loading: false,\n        banks: action.banks,\n        updatedAt: action.updatedAt\n      };\n\n    case FETCH_BANKS_FAILURE:\n      // The request failed. It's done. So set loading to \"false\".\n      // Save the error, so we can display it somewhere.\n      // Since it failed, we don't have items to display anymore, so set `items` empty.\n      //\n      // This is all up to you and your app though:\n      // maybe you want to keep the items around!\n      // Do whatever seems right for your use case.\n      return {\n        ...state,\n        loading: false,\n      };\n\n    default:\n      // ALWAYS have a default case in a reducer\n      return state;\n  }\n};\n","import { takeLatest, put, call } from 'redux-saga/effects';\nimport {\n  FETCH_BANKS,\n  fetchBanksBegin,\n  fetchBanksSuccess,\n  fetchBanksFailure\n} from '../actions/banksActions';\n\nconst DOMAIN = \"https://glacial-dusk-89024.herokuapp.com\";\n\nexport function* watchFetchBanks() {\n  yield takeLatest(FETCH_BANKS, fetchBanksAsync);\n}\n\nfunction* fetchBanksAsync () {\n  try {\n    yield put (fetchBanksBegin());\n    const data = yield call ( () =>\n      fetch(`${DOMAIN}/api/v1/exchanges/now`)\n        .then( res => res.json())\n    );\n    // sanitize data to match with Bank PropTypes\n    data.banks.forEach( bank => {\n      bank.sell = bank.sell['$numberDecimal'];\n      bank.buy = bank.buy['$numberDecimal'];\n    });\n    data.createdAt = new Date(data.createdAt).toString();\n\n    yield put (fetchBanksSuccess(data));\n  } catch (error) {\n    yield put (fetchBanksFailure());\n  }\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { reducer } from './../reducers/banks';\n\nimport { watchFetchBanks } from './../sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  reducer,\n  applyMiddleware(sagaMiddleware)\n);\nsagaMiddleware.run(watchFetchBanks);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport store from './lib/store';\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}